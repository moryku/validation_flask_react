{"ast":null,"code":"var _jsxFileName = \"/Users/Remap/WebstormProjects/news/src/components/form/LoginForm.js\";\nimport { Form, Icon, Input, Button, Radio } from 'antd';\nimport React from \"react\";\nimport { Row, Col } from 'antd';\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleFormLayoutChange = e => {\n      this.setState({\n        typeForm: e.target.value()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  render() {\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldsError = _this$props$form.getFieldsError,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldTouched = _this$props$form.isFieldTouched; // Only show error after a field is touched.\n\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    return React.createElement(Form, {\n      layout: \"vertical\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      validateStatus: usernameError ? 'error' : '',\n      help: usernameError || '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      validateStatus: passwordError ? 'error' : '',\n      help: passwordError || '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: hasErrors(getFieldsError()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Log in\"))));\n  }\n\n}\n\nLoginForm = Form.create()(LoginForm);\nexport { LoginForm as default }; // imported as SomeComponent","map":{"version":3,"sources":["/Users/Remap/WebstormProjects/news/src/components/form/LoginForm.js"],"names":["Form","Icon","Input","Button","Radio","React","Row","Col","hasErrors","fieldsError","Object","keys","some","field","LoginForm","Component","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","handleFormLayoutChange","setState","typeForm","target","value","componentDidMount","render","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","rules","required","message","color","create","default"],"mappings":"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","sourcesContent":["import {Form, Icon, Input, Button, Radio} from 'antd';\nimport React from \"react\";\nimport {Row, Col} from 'antd';\n\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\n\nclass LoginForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    componentDidMount() {\n        this.props.form.validateFields();\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    };\n\n    handleFormLayoutChange = e => {\n        this.setState({\n            typeForm: e.target.value()\n        })\n    }\n\n    render() {\n        const {getFieldDecorator, getFieldsError, getFieldError, isFieldTouched} = this.props.form;\n\n        // Only show error after a field is touched.\n        const usernameError = isFieldTouched('username') && getFieldError('username');\n        const passwordError = isFieldTouched('password') && getFieldError('password');\n        return (\n            <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n\n                <div>\n                    <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                        {getFieldDecorator('username', {\n                            rules: [{required: true, message: 'Please input your username!'}],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                placeholder=\"Username\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                        {getFieldDecorator('password', {\n                            rules: [{required: true, message: 'Please input your Password!'}],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                            Log in\n                        </Button>\n                    </Form.Item>\n                </div>\n            </Form>\n        );\n    }\n}\n\nLoginForm = Form.create()(LoginForm);\nexport {LoginForm as default};  // imported as SomeComponent"]},"metadata":{},"sourceType":"module"}