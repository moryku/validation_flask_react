{"ast":null,"code":"var _jsxFileName = \"/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js\";\nimport { Form, Icon, Input, Button } from 'antd';\nimport React from \"react\";\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass RegisterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, website));\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nRegisterForm = Form.create()(RegisterForm);\nexport { RegisterForm as default }; // imported as SomeComponent","map":{"version":3,"sources":["/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js"],"names":["Form","Icon","Input","Button","React","hasErrors","fieldsError","Object","keys","some","field","RegisterForm","Component","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","confirmDirty","state","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","autoCompleteResult","map","domain","componentDidMount","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","validator","whitespace","residences","valuePropName","create","default"],"mappings":";AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,QAA0C,MAA1C;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,SAAT,CAAmBC,WAAnB,EAAgC;AAC5B,SAAOC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,IAAzB,CAA8BC,KAAK,IAAIJ,WAAW,CAACI,KAAD,CAAlD,CAAP;AACH;;AAED,MAAMC,YAAN,SAA2BP,KAAK,CAACQ,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAMvCC,YANuC,GAMxBC,CAAC,IAAI;AAChBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,uBAAhB,CAAwC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACrD,YAAI,CAACD,GAAL,EAAU;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACH;AACJ,OAJD;AAKH,KAbsC;;AAAA,SAevCG,iBAfuC,GAenBT,CAAC,IAAI;AAAA,YACdU,KADc,GACLV,CAAC,CAACW,MADG,CACdD,KADc;AAErB,WAAKE,QAAL,CAAc;AAACC,QAAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD,YAAX,IAA2B,CAAC,CAACH;AAA5C,OAAd;AACH,KAlBsC;;AAAA,SAoBvCK,sBApBuC,GAoBd,CAACC,IAAD,EAAON,KAAP,EAAcO,QAAd,KAA2B;AAAA,YACzCd,IADyC,GACjC,KAAKD,KAD4B,CACzCC,IADyC;;AAEhD,UAAIO,KAAK,IAAIA,KAAK,KAAKP,IAAI,CAACe,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACnDD,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACH,OAFD,MAEO;AACHA,QAAAA,QAAQ;AACX;AACJ,KA3BsC;;AAAA,SA6BvCE,sBA7BuC,GA6Bd,CAACH,IAAD,EAAON,KAAP,EAAcO,QAAd,KAA2B;AAAA,YACzCd,IADyC,GACjC,KAAKD,KAD4B,CACzCC,IADyC;;AAEhD,UAAIO,KAAK,IAAI,KAAKI,KAAL,CAAWD,YAAxB,EAAsC;AAClCV,QAAAA,IAAI,CAACiB,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAjC;AACH;;AACDJ,MAAAA,QAAQ;AACX,KAnCsC;;AAAA,SAqCvCK,mBArCuC,GAqCjBZ,KAAK,IAAI;AAC3B,UAAIa,kBAAJ;;AACA,UAAI,CAACb,KAAL,EAAY;AACRa,QAAAA,kBAAkB,GAAG,EAArB;AACH,OAFD,MAEO;AACHA,QAAAA,kBAAkB,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyBC,GAAzB,CAA6BC,MAAM,cAAOf,KAAP,SAAee,MAAf,CAAnC,CAArB;AACH;;AACD,WAAKb,QAAL,CAAc;AAACW,QAAAA;AAAD,OAAd;AACH,KA7CsC;AAAA;;AAEvCG,EAAAA,iBAAiB,GAAG;AAChB,SAAKxB,KAAL,CAAWC,IAAX,CAAgBiB,cAAhB;AACH;;AA2CDO,EAAAA,MAAM,GAAG;AAAA,UACEC,iBADF,GACuB,KAAK1B,KAAL,CAAWC,IADlC,CACEyB,iBADF;AAAA,UAEEL,kBAFF,GAEwB,KAAKT,KAF7B,CAEES,kBAFF;AAIL,UAAMM,cAAc,GAAG;AACnBC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,EAAE,EAAE;AAACC,UAAAA,IAAI,EAAE;AAAP,SADE;AAENC,QAAAA,EAAE,EAAE;AAACD,UAAAA,IAAI,EAAE;AAAP;AAFE,OADS;AAKnBE,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AAACC,UAAAA,IAAI,EAAE;AAAP,SADI;AAERC,QAAAA,EAAE,EAAE;AAACD,UAAAA,IAAI,EAAE;AAAP;AAFI;AALO,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACvBD,MAAAA,UAAU,EAAE;AACRH,QAAAA,EAAE,EAAE;AACAC,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR,SADI;AAKRH,QAAAA,EAAE,EAAE;AACAD,UAAAA,IAAI,EAAE,EADN;AAEAI,UAAAA,MAAM,EAAE;AAFR;AALI;AADW,KAA3B;AAYA,UAAMC,cAAc,GAAGT,iBAAiB,CAAC,QAAD,EAAW;AAC/CU,MAAAA,YAAY,EAAE;AADiC,KAAX,CAAjB,CAGnB,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CAHmB,CAAvB;AASA,UAAMC,cAAc,GAAGjB,kBAAkB,CAACC,GAAnB,CAAuBiB,OAAO,IACjD,oBAAC,kBAAD;AAAoB,MAAA,GAAG,EAAEA,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCA,OAAnC,CADmB,CAAvB;AAIA,WACI,oBAAC,IAAD,oBAAUZ,cAAV;AAA0B,MAAA,QAAQ,EAAE,KAAK9B,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK6B,iBAAiB,CAAC,OAAD,EAAU;AACxBc,MAAAA,KAAK,EAAE,CACH;AACIC,QAAAA,IAAI,EAAE,OADV;AAEIC,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIC,QAAAA,QAAQ,EAAE,IADd;AAEID,QAAAA,OAAO,EAAE;AAFb,OALG;AADiB,KAAV,CAAjB,CAWE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADL,CADJ,EAeI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,UAAjB;AAA4B,MAAA,WAAW,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKhB,iBAAiB,CAAC,UAAD,EAAa;AAC3Bc,MAAAA,KAAK,EAAE,CACH;AACIG,QAAAA,QAAQ,EAAE,IADd;AAEID,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIE,QAAAA,SAAS,EAAE,KAAK3B;AADpB,OALG;AADoB,KAAb,CAAjB,CAUE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADL,CAfJ,EA4BI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,kBAAjB;AAAoC,MAAA,WAAW,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKS,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CACH;AACIG,QAAAA,QAAQ,EAAE,IADd;AAEID,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIE,QAAAA,SAAS,EAAE,KAAK/B;AADpB,OALG;AADmB,KAAZ,CAAjB,CAUE,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,MAAM,EAAE,KAAKN,iBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADL,CA5BJ,EAyCI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,KAAK,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEI,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACZ,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY,CAFJ,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUKmB,iBAAiB,CAAC,UAAD,EAAa;AAC3Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE,6BAA1B;AAAyDG,QAAAA,UAAU,EAAE;AAArE,OAAD;AADoB,KAAb,CAAjB,CAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAVL,CAzCJ,EAuDI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKnB,iBAAiB,CAAC,WAAD,EAAc;AAC5BU,MAAAA,YAAY,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,MAAzB,CADc;AAE5BI,MAAAA,KAAK,EAAE,CACH;AAACC,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,QAAQ,EAAE,IAA1B;AAAgCD,QAAAA,OAAO,EAAE;AAAzC,OADG;AAFqB,KAAd,CAAjB,CAKE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEI,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADL,CAvDJ,EA+DI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKpB,iBAAiB,CAAC,OAAD,EAAU;AACxBc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADiB,KAAV,CAAjB,CAEE,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAEP,cAApB;AAAoC,MAAA,KAAK,EAAE;AAACE,QAAAA,KAAK,EAAE;AAAR,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADL,CA/DJ,EAoEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKX,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADmB,KAAZ,CAAjB,CAGG,oBAAC,YAAD;AACI,MAAA,UAAU,EAAEJ,cADhB;AAEI,MAAA,QAAQ,EAAE,KAAKlB,mBAFnB;AAGI,MAAA,WAAW,EAAC,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAHH,CADL,CApEJ,EAiFI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAC,SAAjB;AAA2B,MAAA,KAAK,EAAC,0CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKM,iBAAiB,CAAC,SAAD,EAAY;AAC1Bc,MAAAA,KAAK,EAAE,CAAC;AAACG,QAAAA,QAAQ,EAAE,IAAX;AAAiBD,QAAAA,OAAO,EAAE;AAA1B,OAAD;AADmB,KAAZ,CAAjB,CAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADL,CADJ,EAMI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CANJ,CADJ,CAjFJ,EA6FI,oBAAC,IAAD,CAAM,IAAN,oBAAeT,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKP,iBAAiB,CAAC,WAAD,EAAc;AAC5BqB,MAAAA,aAAa,EAAE;AADa,KAAd,CAAjB,CAGG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACoB;AAAG,MAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADpB,CAHH,CADL,CA7FJ,EAsGI,oBAAC,IAAD,CAAM,IAAN,oBAAed,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAtGJ,CADJ;AA8GH;;AApMsC;;AAuM3CtC,YAAY,GAAGX,IAAI,CAACgE,MAAL,GAAcrD,YAAd,CAAf;AACA,SAASA,YAAY,IAAIsD,OAAzB,G,CAAqC","sourcesContent":["import { Form, Icon, Input, Button } from 'antd';\n\nimport React from \"react\";\n\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass RegisterForm extends React.Component {\n\n    componentDidMount() {\n        this.props.form.validateFields();\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const {value} = e.target;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], {force: true});\n        }\n        callback();\n    };\n\n    handleWebsiteChange = value => {\n        let autoCompleteResult;\n        if (!value) {\n            autoCompleteResult = [];\n        } else {\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n        }\n        this.setState({autoCompleteResult});\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const {autoCompleteResult} = this.state;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '86',\n        })(\n            <Select style={{width: 70}}>\n                <Option value=\"86\">+86</Option>\n                <Option value=\"87\">+87</Option>\n            </Select>,\n        );\n\n        const websiteOptions = autoCompleteResult.map(website => (\n            <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n        ));\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                <Form.Item label=\"E-mail\">\n                    {getFieldDecorator('email', {\n                        rules: [\n                            {\n                                type: 'email',\n                                message: 'The input is not valid E-mail!',\n                            },\n                            {\n                                required: true,\n                                message: 'Please input your E-mail!',\n                            },\n                        ],\n                    })(<Input/>)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password/>)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur}/>)}\n                </Form.Item>\n                <Form.Item\n                    label={\n                        <span>\n              Nickname&nbsp;\n                            <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\"/>\n              </Tooltip>\n            </span>\n                    }\n                >\n                    {getFieldDecorator('nickname', {\n                        rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\n                    })(<Input/>)}\n                </Form.Item>\n                <Form.Item label=\"Habitual Residence\">\n                    {getFieldDecorator('residence', {\n                        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n                        rules: [\n                            {type: 'array', required: true, message: 'Please select your habitual residence!'},\n                        ],\n                    })(<Cascader options={residences}/>)}\n                </Form.Item>\n                <Form.Item label=\"Phone Number\">\n                    {getFieldDecorator('phone', {\n                        rules: [{required: true, message: 'Please input your phone number!'}],\n                    })(<Input addonBefore={prefixSelector} style={{width: '100%'}}/>)}\n                </Form.Item>\n                <Form.Item label=\"Website\">\n                    {getFieldDecorator('website', {\n                        rules: [{required: true, message: 'Please input website!'}],\n                    })(\n                        <AutoComplete\n                            dataSource={websiteOptions}\n                            onChange={this.handleWebsiteChange}\n                            placeholder=\"website\"\n                        >\n                            <Input/>\n                        </AutoComplete>,\n                    )}\n                </Form.Item>\n                <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            {getFieldDecorator('captcha', {\n                                rules: [{required: true, message: 'Please input the captcha you got!'}],\n                            })(<Input/>)}\n                        </Col>\n                        <Col span={12}>\n                            <Button>Get captcha</Button>\n                        </Col>\n                    </Row>\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    {getFieldDecorator('agreement', {\n                        valuePropName: 'checked',\n                    })(\n                        <Checkbox>\n                            I have read the <a href=\"\">agreement</a>\n                        </Checkbox>,\n                    )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nRegisterForm = Form.create()(RegisterForm);\nexport { RegisterForm as default };  // imported as SomeComponent"]},"metadata":{},"sourceType":"module"}