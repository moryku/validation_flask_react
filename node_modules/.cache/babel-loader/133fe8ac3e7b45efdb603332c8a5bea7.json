{"ast":null,"code":"var _jsxFileName = \"/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js\";\nimport React, { Component } from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\n\nclass RegisterForm extends Component {\n  componentDidMount() {\n    // To disabled submit button at the beginning.\n    this.props.form.validateFields();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: ''\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n  } // function hasErrors(fieldsError) {\n  //     return Object.keys(fieldsError).some(field => fieldsError[field]);\n  // }\n\n\n  changeHandler(event) {\n    this.setState({\n      email: event.target.email\n    });\n  }\n\n  submitHandler(event) {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  render() {\n    const _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldsError = _this$props$form.getFieldsError,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldTouched = _this$props$form.isFieldTouched;\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    return React.createElement(Form, {\n      layout: \"inline\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      validateStatus: usernameError ? 'error' : '',\n      help: usernameError || '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      validateStatus: passwordError ? 'error' : '',\n      help: passwordError || '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your Password!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: hasErrors(getFieldsError()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Log in\")));\n  }\n\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js"],"names":["React","Component","Form","Icon","Input","Button","RegisterForm","componentDidMount","props","form","validateFields","constructor","state","email","changeHandler","bind","event","setState","target","submitHandler","e","preventDefault","err","values","console","log","render","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","handleSubmit","rules","required","message","color","hasErrors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Icon, Input, Button } from 'antd';\n\nclass RegisterForm extends Component {\n\n    componentDidMount() {\n        // To disabled submit button at the beginning.\n        this.props.form.validateFields();\n    }\n\n    constructor (props){\n        super(props)\n        this.state = {\n            email: ''\n        }\n        this.changeHandler = this.changeHandler.bind(this)\n    }\n\n    // function hasErrors(fieldsError) {\n    //     return Object.keys(fieldsError).some(field => fieldsError[field]);\n    // }\n\n\n    changeHandler(event){\n        this.setState( {\n            email: event.target.email\n        })\n    }\n\n    submitHandler(event) {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    }\n\n    render() {\n        const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n        const usernameError = isFieldTouched('username') && getFieldError('username');\n        const passwordError = isFieldTouched('password') && getFieldError('password');\n        return (\n            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                        Log in\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default RegisterForm;\n\n"]},"metadata":{},"sourceType":"module"}