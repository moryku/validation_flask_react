{"ast":null,"code":"var _jsxFileName = \"/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js\";\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nimport * as React from \"react\";\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\nconst getFieldDecorator = this.props.form.getFieldDecorator;\nconst autoCompleteResult = this.state.autoCompleteResult;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\nconst prefixSelector = getFieldDecorator('prefix', {\n  initialValue: '86'\n})(React.createElement(Select, {\n  style: {\n    width: 70\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}, React.createElement(Option, {\n  value: \"86\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83\n  },\n  __self: this\n}, \"+86\"), React.createElement(Option, {\n  value: \"87\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84\n  },\n  __self: this\n}, \"+87\")));\nconst websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n  key: website,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89\n  },\n  __self: this\n}, website));\n\nclass RegisterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/Remap/WebstormProjects/news/src/components/form/RegisterForm.js"],"names":["Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","React","Option","AutoCompleteOption","residences","value","label","children","getFieldDecorator","props","form","autoCompleteResult","state","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","map","website","RegisterForm","Component","confirmDirty","handleSubmit","e","preventDefault","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","domain","render","rules","type","message","required","validator","whitespace","valuePropName"],"mappings":"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","sourcesContent":["import {\n    Form,\n    Input,\n    Tooltip,\n    Icon,\n    Cascader,\n    Select,\n    Row,\n    Col,\n    Checkbox,\n    Button,\n    AutoComplete,\n} from 'antd';\nimport * as React from \"react\";\n\nconst {Option} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [\n    {\n        value: 'zhejiang',\n        label: 'Zhejiang',\n        children: [\n            {\n                value: 'hangzhou',\n                label: 'Hangzhou',\n                children: [\n                    {\n                        value: 'xihu',\n                        label: 'West Lake',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        value: 'jiangsu',\n        label: 'Jiangsu',\n        children: [\n            {\n                value: 'nanjing',\n                label: 'Nanjing',\n                children: [\n                    {\n                        value: 'zhonghuamen',\n                        label: 'Zhong Hua Men',\n                    },\n                ],\n            },\n        ],\n    },\n];\n\nconst {getFieldDecorator} = this.props.form;\nconst {autoCompleteResult} = this.state;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: {span: 24},\n        sm: {span: 8},\n    },\n    wrapperCol: {\n        xs: {span: 24},\n        sm: {span: 16},\n    },\n};\nconst tailFormItemLayout = {\n    wrapperCol: {\n        xs: {\n            span: 24,\n            offset: 0,\n        },\n        sm: {\n            span: 16,\n            offset: 8,\n        },\n    },\n};\nconst prefixSelector = getFieldDecorator('prefix', {\n    initialValue: '86',\n})(\n    <Select style={{width: 70}}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n    </Select>,\n);\n\nconst websiteOptions = autoCompleteResult.map(website => (\n    <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n));\n\n\nclass RegisterForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const {value} = e.target;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], {force: true});\n        }\n        callback();\n    };\n\n    handleWebsiteChange = value => {\n        let autoCompleteResult;\n        if (!value) {\n            autoCompleteResult = [];\n        } else {\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n        }\n        this.setState({autoCompleteResult});\n    };\n\n    render() {\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                <Form.Item label=\"E-mail\">\n                    {getFieldDecorator('email', {\n                        rules: [\n                            {\n                                type: 'email',\n                                message: 'The input is not valid E-mail!',\n                            },\n                            {\n                                required: true,\n                                message: 'Please input your E-mail!',\n                            },\n                        ],\n                    })(<Input/>)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password/>)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur}/>)}\n                </Form.Item>\n                <Form.Item\n                    label={\n                        <span>\n              Nickname&nbsp;\n                            <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\"/>\n              </Tooltip>\n            </span>\n                    }\n                >\n                    {getFieldDecorator('nickname', {\n                        rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\n                    })(<Input/>)}\n                </Form.Item>\n                <Form.Item label=\"Habitual Residence\">\n                    {getFieldDecorator('residence', {\n                        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n                        rules: [\n                            {type: 'array', required: true, message: 'Please select your habitual residence!'},\n                        ],\n                    })(<Cascader options={residences}/>)}\n                </Form.Item>\n                <Form.Item label=\"Phone Number\">\n                    {getFieldDecorator('phone', {\n                        rules: [{required: true, message: 'Please input your phone number!'}],\n                    })(<Input addonBefore={prefixSelector} style={{width: '100%'}}/>)}\n                </Form.Item>\n                <Form.Item label=\"Website\">\n                    {getFieldDecorator('website', {\n                        rules: [{required: true, message: 'Please input website!'}],\n                    })(\n                        <AutoComplete\n                            dataSource={websiteOptions}\n                            onChange={this.handleWebsiteChange}\n                            placeholder=\"website\"\n                        >\n                            <Input/>\n                        </AutoComplete>,\n                    )}\n                </Form.Item>\n                <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            {getFieldDecorator('captcha', {\n                                rules: [{required: true, message: 'Please input the captcha you got!'}],\n                            })(<Input/>)}\n                        </Col>\n                        <Col span={12}>\n                            <Button>Get captcha</Button>\n                        </Col>\n                    </Row>\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    {getFieldDecorator('agreement', {\n                        valuePropName: 'checked',\n                    })(\n                        <Checkbox>\n                            I have read the <a href=\"\">agreement</a>\n                        </Checkbox>,\n                    )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default RegisterForm;\n\n"]},"metadata":{},"sourceType":"module"}